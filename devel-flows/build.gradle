plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'maven-publish'
}

bootJar {
	archiveFileName = 'devel-flows.jar'
}

group = 'com.obj.nc.flows'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.15.1")
	set('springCloudVersion', "Hoxton.SR8")
	set('junitJupiterVersion', '5.4.2')
}

dependencies {
	implementation project(':functions')
	
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support' https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.1.3.RELEASE/multi/multi__testing.html
	testImplementation("org.springframework.cloud:spring-cloud-stream") {
        artifact {
            name = "spring-cloud-stream"
            extension = "jar"
            type ="test-jar"
            classifier = "test-binder"
        }
    }

	testCompile 'org.junit.jupiter:junit-jupiter-api'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine'
	testCompile 'org.junit.jupiter:junit-jupiter-params'
	testCompile 'org.junit.platform:junit-platform-launcher'
	testCompile 'org.junit.platform:junit-platform-runner'

	testImplementation "org.testcontainers:testcontainers"
	testImplementation "org.testcontainers:junit-jupiter"
	testImplementation(testFixtures(project(":functions")))
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.junit:junit-bom:${junitJupiterVersion}"
	}
}

test {
	systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active")
	useJUnitPlatform()
}


task copyDistToStagingFolder(type: Copy) {
	from bootJar // shortcut for bootJar.outputs.files
	into "./../docker/devel-flows/dist"
}

build.dependsOn copyDistToStagingFolder