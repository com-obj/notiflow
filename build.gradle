plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'maven-publish'
	id 'net.nemerosa.versioning' version '2.14.0'
	id 'java-library'	
	id 'signing'
	id 'io.freefair.lombok' version '5.3.2'
	id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
//	id 'org.asciidoctor.jvm.convert' version '3.3.0'
}

/* 
configurations {
    asciidoctorExt
}
*/

group = 'sk.objectify'
sourceCompatibility = 1.8
targetCompatibility = 1.8

if (versioning.info.tag && !versioning.info.dirty) {
	
	version = extractVersionFromTag(versioning.info.tag, false)
	println 'Commit tagged and no uncommited changes. CREATING FINAL VERSION ' + version
}
else {
	version = extractVersionFromTag(versioning.info.lastTag, true)
	println 'Commit not tagged or not all changes commited. CREATING SNAPSHOT VERSION ' + version
}

java {
	withJavadocJar()
	withSourcesJar()
}

dependencies {
	api 'org.springframework.boot:spring-boot-starter'
//    api 'org.springframework.boot:spring-boot-starter-log4j2'
    api 'org.slf4j:log4j-over-slf4j'
	api 'org.springframework.boot:spring-boot-starter-integration'
	api 'org.springframework.integration:spring-integration-jdbc'
	api 'org.springframework.integration:spring-integration-http'
	api 'org.springframework.boot:spring-boot-starter-data-jdbc'
	api 'org.springframework.boot:spring-boot-starter-validation'
	api 'org.springframework.boot:spring-boot-starter-mail'
	api 'org.springframework.boot:spring-boot-starter-thymeleaf'
	api 'org.springframework.boot:spring-boot-starter-web'
	api 'org.springframework.boot:spring-boot-starter-actuator'
	api 'org.springframework.boot:spring-boot-starter-security'
	api 'org.springframework:spring-test'

	api 'com.google.guava:guava:30.1.1-jre'
	api 'com.google.firebase:firebase-admin:8.1.0'

	api 'io.jsonwebtoken:jjwt:0.9.1'
	api 'org.apache.commons:commons-email:1.5'
	api 'org.apache.commons:commons-lang3:3.12.0'
	api 'org.apache.commons:commons-text:1.9'
	api 'commons-codec:commons-codec:1.15'

	api 'org.jsoup:jsoup:1.13.1'

	api 'io.rest-assured:json-schema-validator:4.2.0'
	api 'org.assertj:assertj-core'

	api 'org.postgresql:postgresql'
	api 'org.flywaydb:flyway-core'

	api 'com.icegreen:greenmail:1.6.3'
	api 'com.icegreen:greenmail-junit5:1.6.3'
	
	api 'org.awaitility:awaitility'

	api 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	api 'com.jayway.jsonpath:json-path:2.4.0'

	api 'io.springfox:springfox-swagger2:2.9.2'
	api 'io.springfox:springfox-swagger-ui:2.9.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.integration:spring-integration-test'


	testImplementation 'commons-jxpath:commons-jxpath:1.3'
	testImplementation 'io.rest-assured:rest-assured:4.2.0'
	testImplementation 'io.rest-assured:json-path:4.2.0'
	testImplementation 'io.rest-assured:xml-path:4.2.0'
	testImplementation 'io.rest-assured:rest-assured-common:4.2.0'
	testImplementation 'io.rest-assured:spring-mock-mvc:4.2.0'
	testImplementation 'commons-jxpath:commons-jxpath:1.3'
	
	api 'org.springframework.restdocs:spring-restdocs-mockmvc' // used in testUtils in src.main	
}

configurations.all {
   exclude group: 'org.apache.logging.log4j'
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}

test {
	systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active")
	useJUnitPlatform()
}

repositories {
	maven {		
		url 'https://plugins.gradle.org/m2/'
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = 'notiflow'
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'Notiflow'
				description = 'Notiflow is software framework for reliable delivery of email, push notifications and other types of messages.'
				url = 'https://github.com/com-obj/notiflow'
				licenses {
					license {
						name = 'GNU Lesser General Public License, Version 3.0'
						url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
					}
				}
				developers {
					developer {
						id = 'cuzyjan'
						name = 'Jan Cuzy'
						email = 'cuzy@objectify.sk'
					}
					developer {
						id = 'peterbazik'
						name = 'Peter Bazik'
						email = 'bazik@objectify.sk'
					}
					developer {
						id = 'davidlazarobjectify'
						name = 'David Lazar'
						email = 'lazar@objectify.sk'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/com-obj/notiflow.git'
					developerConnection = 'scm:git:https://github.com/com-obj/notiflow.git'
					url = 'https://github.com/com-obj/notiflow'
				}
			}
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
		}
	}
}

def base64DecodeProp(prop) {
	def propEscaped = project.findProperty(prop).toString().replace("\n", "")
	return new String(Base64.getDecoder().decode(propEscaped)).trim()
}

signing {
	def gpgSigningKey = base64DecodeProp('gpgSigningKey')
	def gpgSigningPassword = base64DecodeProp('gpgSigningPassword')
	useInMemoryPgpKeys(gpgSigningKey, gpgSigningPassword)
	sign publishing.publications.mavenJava
}

javadoc {
	if(JavaVersion.current().isJava8Compatible()) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

def extractVersionFromTag(tagLabel, snapshot) {
	def matcher = tagLabel =~ /v(\d+).(\d+).(\d+)(.*)/
		
	if (matcher.size() == 0) return "0.0.1" + (snapshot ? "-SNAPSHOT" : "")
	if (matcher[0].size() < 4) println("Tag " +  tagLabel + " is not in form of v9.9.9 (v9.9.9-rc.9). Matched: " + matcher[0])

	if (snapshot) {
		return matcher[0][1] + "." + matcher[0][2] + "." + (matcher[0][3].toInteger() + 1) + "-SNAPSHOT"
	} else {
		return matcher[0][1] + "." + matcher[0][2] + "." + matcher[0][3] + matcher[0][4]
	}
}
