@startuml

!theme cerulean-outline

left to right direction

skinparam backgroundcolor White
skinparam component {
    backgroundColor<<user defined>> LightGray
}
/'
database "PostgreSQL" {
    [nc_message]
    [nc_endpoint]
}
'/

database "Topic/Channels" {
    component EMAIL_FORMAT_AND_SEND_FLOW_INPUT_ID<<PUB/SUB>>[
        EMAIL_FORMAT_AND_SEND_FLOW_INPUT_ID
        --
        (EmailMessage/EmailMessageTemplated)
    ]

    component EMAIL_SEND_FLOW_INPUT_ID<<PUB/SUB>>[
        EMAIL_SEND_FLOW_INPUT_ID
        --
        (EmailMessage)
    ]

    component EMAIL_SEND_FLOW_OUTPUT_CHANNEL_ID<<PUB/SUB>>[
        EMAIL_SEND_FLOW_OUTPUT_CHANNEL_ID
        --
        (EmailMessage)
    ]

    component DELIVERY_INFO_SEND_FLOW_ID_INPUT<<PUB/SUB>>  [
        DELIVERY_INFO_SEND_FLOW_ID_INPUT
        --
        (HasRecievingEndpoints)
    ]

}

component "EmailSendFlow" {
    [endpointPersister] as endpointPersister1
    [messagePersister] as messagePersister1
    [emailReadTrackingDecorator]
    [endpointPersister] as endpointPersister2
    [messagePersister] as messagePersister2
    [emailSender]

    endpointPersister1 -l-> messagePersister1: (EmailMessage)
    messagePersister1 -l-> emailReadTrackingDecorator: (EmailMessage)
    emailReadTrackingDecorator -l-> messagePersister2: (EmailMessage)
    messagePersister2 -l-> emailSender: (EmailMessage)

 '   messagePersister --> nc_message: (EmailMessage)
'  endpointPersister --> nc_endpoint: (List<RecievingEndpoint>)

    endpointPersister1 ..> EMAIL_SEND_FLOW_INPUT_ID : (EmailMessage) 
    emailSender --> EMAIL_SEND_FLOW_OUTPUT_CHANNEL_ID : (EmailMessage) 

    emailSender --> DELIVERY_INFO_SEND_FLOW_ID_INPUT : (EmailMessage) 

    note left of emailReadTrackingDecorator 
        if (nc.functions.email-tracking.enabled = true 
            AND contentType = MediaType.TEXT_HTML_VALUE)
            do
        else
            skipp        
    end note  

    
    interface "sendEmail (Message)" as sendEmail        
        endpointPersister1 -u- sendEmail
}



component "EmailFormatAndSendFlow" {
    [endpointPersister] as endpointPersister3
    [messagePersister] as messagePersister3
    [formatOrSendRouter]
    [emailFormatter]
    [messagePersister] as messagePersister4
    [emailMessageAggregationStrategy]
    [messagePersister] as messagePersister5


    emailFormatter --> messagePersister4: (EmailMessageTemplated)
    messagePersister4 --> emailMessageAggregationStrategy: (List<EmailMessageTemplated>)

    endpointPersister3 .> EMAIL_FORMAT_AND_SEND_FLOW_INPUT_ID : (EmailMessage/EmailMessageTemplated) 



    endpointPersister3 -> messagePersister3 : (EmailMessageTemplated)
    messagePersister3 -> formatOrSendRouter : (EmailMessageTemplated)
    formatOrSendRouter -> emailFormatter : (EmailMessageTemplated)
    formatOrSendRouter -> EMAIL_SEND_FLOW_INPUT_ID : (EmailMessage)

    emailMessageAggregationStrategy -l-> messagePersister5 : (EmailMessage) 
    messagePersister5 -> EMAIL_SEND_FLOW_INPUT_ID : (EmailMessage) 

    interface "formatAndSend (Message)" as formatAndSend        
        endpointPersister3 -u- formatAndSend
        
}







@enduml