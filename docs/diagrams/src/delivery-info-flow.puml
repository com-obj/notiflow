@startuml

!theme cerulean-outline

left to right direction

skinparam backgroundcolor White
skinparam component {
    backgroundColor<<user defined>> LightGray
}



database "PostgreSQL" {
    [nc_delivery_info]
}

database "Topic/Channels" {
    component DELIVERY_INFO_PROCESSING_FLOW_ID_INPUT<<PUB/SUB>>  [
        DELIVERY_INFO_PROCESSING_FLOW_ID_INPUT
        --
        (HasReceivingEndpoints)
    ]
    component DELIVERY_INFO_SEND_FLOW_ID_INPUT<<PUB/SUB>>  [
        DELIVERY_INFO_SEND_FLOW_ID_INPUT
        --
        (HasReceivingEndpoints)
    ]
    component DELIVERY_INFO_READ_FLOW_ID_INPUT<<PUB/SUB>>  [
        DELIVERY_INFO_READ_FLOW_ID_INPUT
        --
        (HasReceivingEndpoints)
    ]
    component DELIVERY_INFO_FAILED_FLOW_ID_INPUT<<PUB/SUB>> [
        DELIVERY_INFO_FAILED_FLOW_ID_INPUT
        --
        (FailedPaylod)
    ]

    component DELIVERY_INFO_FLOW_OUTPUT_CHANNEL_ID<<PUB/SUB>> [
        DELIVERY_INFO_FLOW_OUTPUT_CHANNEL_ID
        --
        (List<DeliveryInfo>)
    ]
    
}

component "DeliveryInfoFlow" {
    component deliveryInfoFailedFlow {        
        [deliveryInfoFailedGenerator]
        [deliveryInfoPersister] as dip_failed

        deliveryInfoFailedGenerator -> dip_failed: (List<DeliveryInfo>)

        deliveryInfoFailedGenerator ..> DELIVERY_INFO_FAILED_FLOW_ID_INPUT: (FailedPaylod)
        dip_failed -----> DELIVERY_INFO_FLOW_OUTPUT_CHANNEL_ID: (List<DeliveryInfo>)

        dip_failed -u-> nc_delivery_info: (List<DeliveryInfo>)
    }

    component deliveryInfoSendFlow {
        [deliveryInfoSendGenerator]
        [splitter] as dips_send
        [deliveryTransformer] as dt_send
        [deliveryInfoPersister] as dip_send

        deliveryInfoSendGenerator -l-> dips_send: (List<DeliveryInfoSendResult>)
        dips_send -l-> dt_send: (DeliveryInfoSendResult)
        dt_send -l-> dip_send: (List<DeliveryInfo>)

        deliveryInfoSendGenerator ..> DELIVERY_INFO_SEND_FLOW_ID_INPUT: (HasReceivingEndpoints)
        dip_send -----> DELIVERY_INFO_FLOW_OUTPUT_CHANNEL_ID: (List<DeliveryInfo>)
    
        dip_send -u-> nc_delivery_info: (List<DeliveryInfo>)
    }

    component deliveryInfoProcessingFlow {
        [deliveryInfoProcessingGenerator]
        [splitter] as dips_processing
        [deliveryTransformer] as dt_processing
        [deliveryInfoPersister] as dip_processing

        deliveryInfoProcessingGenerator -l-> dips_processing: (List<DeliveryInfoSendResult>)
        dips_processing -l-> dt_processing: (DeliveryInfoSendResult)
        dt_processing -l-> dip_processing: (List<DeliveryInfo>)

        deliveryInfoProcessingGenerator ..> DELIVERY_INFO_PROCESSING_FLOW_ID_INPUT: (HasReceivingEndpoints)
        dip_processing -----> DELIVERY_INFO_FLOW_OUTPUT_CHANNEL_ID: (List<DeliveryInfo>)
    
        dip_processing -u-> nc_delivery_info: (List<DeliveryInfo>)
    }

    component deliveryInfoReadFlow {
        [deliveryInfoReadGenerator]
        [splitter] as dips_read
        [deliveryTransformer] as dt_read
        [deliveryInfoPersister] as dip_read

        deliveryInfoReadGenerator -> dips_read: (List<DeliveryInfoSendResult>)
        dips_read -> dt_read: (DeliveryInfoSendResult)
        dt_read -> dip_read: (List<DeliveryInfo>)

        deliveryInfoReadGenerator ..> DELIVERY_INFO_READ_FLOW_ID_INPUT: (HasReceivingEndpoints)
        dip_read -----> DELIVERY_INFO_FLOW_OUTPUT_CHANNEL_ID: (List<DeliveryInfo>)
    
        dip_read -u-> nc_delivery_info: (List<DeliveryInfo>)
    }
}

@enduml