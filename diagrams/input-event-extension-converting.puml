@startuml

!theme cerulean-outline

skinparam component {
    backgroundColor<<user defined>> LightGray
}

database "Topic/Channels" {
    component EVENT_CONVERTING_EXTENSION_FLOW_ID_INPUT<<PUB/SUB>> [
        EVENT_CONVERTING_EXTENSION_FLOW_ID_INPUT
        --
        (GenericEvent)
    ]
  
    component MESSAGE_PROCESSING_FLOW_ID_INPUT<<PUB/SUB>>[
        MESSAGE_PROCESSING_FLOW_ID_INPUT
        --
        (Message)
    ]

    component INTENT_PROCESSING_FLOW_ID_INPUT<<PUB/SUB>>[
        INTENT_PROCESSING_FLOW_ID_INPUT
        --
        (NotificationIntent)
    ]
}

node "InputEventExtensionConverting" {
    [extensionsBasedEventConvertor] ..> [EVENT_CONVERTING_EXTENSION_FLOW_ID_INPUT] : read (GenericEvent)
    [splitter]
    [messageOrIntentRouter]
    [InputEventConverterExtension]
    [converter 1]<<user defined>>
    [converter N]<<user defined>>

    extensionsBasedEventConvertor -up-> InputEventConverterExtension: convertEvent (GenericEvent) 
    [converter 1] -[bold]-> InputEventConverterExtension: implements
    [converter N] .[bold].> InputEventConverterExtension: implements
    extensionsBasedEventConvertor -> splitter: (List<IsNotification>)
    splitter -> messageOrIntentRouter: (IsNotification)

    messageOrIntentRouter -> MESSAGE_PROCESSING_FLOW_ID_INPUT: write(Message)
    messageOrIntentRouter -> INTENT_PROCESSING_FLOW_ID_INPUT: write(NotificationIntent)

    note top of messageOrIntentRouter 
    IF payload instanceof  
        [Message
        NotificationIntent]
    end note  
}

@enduml